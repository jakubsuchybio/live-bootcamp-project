services:
  app-service:
    image: biosek/app-service:${TAG:-latest} # use versioned tags with fallback to latest
    restart: "always" # automatically restart container when server crashes
    stop_signal: SIGINT # Use SIGINT instead of SIGTERM for quicker shutdown
    stop_grace_period: 1s # reduce shutdown wait time
    init: true # use init process for handling signals
    environment: # set up environment variables
      AUTH_SERVICE_IP: ${AUTH_SERVICE_IP:-localhost} # Use localhost as the default value
    # No direct port exposure as Nginx will handle external access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    depends_on: # only run app-service after auth-service has started
      auth-service:
        condition: service_healthy
    networks:
      - web

  auth-service:
    image: biosek/auth-service:${TAG:-latest}
    restart: "always" # automatically restart container when server crashes
    stop_signal: SIGINT # Use SIGINT instead of SIGTERM for quicker shutdown
    stop_grace_period: 1s # reduce shutdown wait time
    init: true # use init process for handling signals
    # No direct port exposure as Nginx will handle external access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db:5432"
      SLACK_WEBHOOK: ${SLACK_WEBHOOK}
    depends_on:
      - db
    networks:
      - web

  db:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - web

  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - web

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    depends_on:
      - app-service
      - auth-service

  certbot:
    image: certbot/certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'exit 0'"
    networks:
      - web

networks:
  web:
    # Network is now managed by Docker Compose
    #
volumes:
  db:
    driver: local
